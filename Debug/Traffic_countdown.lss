
Traffic_countdown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800102  00800102  00000878  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3e  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7b  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000791  00000000  00000000  000023f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fa  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047a  00000000  00000000  000033e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_2>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_11>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_18>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  bc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000cc <__trampolines_end>:
  cc:	ff fc       	.word	0xfcff	; ????
  ce:	3f ff       	.word	0xff3f	; ????
  d0:	00 00       	nop
  d2:	03 ff       	sbrs	r16, 3
  d4:	07 ff       	sbrs	r16, 7
  d6:	ff e0       	ldi	r31, 0x0F	; 15
  d8:	00 3f       	cpi	r16, 0xF0	; 240
  da:	ff ff       	.word	0xffff	; ????
  dc:	f8 03       	fmulsu	r23, r16
  de:	c3 ff       	sbrs	r28, 3
  e0:	f8 3f       	cpi	r31, 0xF8	; 248
  e2:	fc 1f       	adc	r31, r28
  e4:	ff ff       	.word	0xffff	; ????
  e6:	fc 1f       	adc	r31, r28
  e8:	00 3c       	cpi	r16, 0xC0	; 192
  ea:	03 ff       	sbrs	r16, 3
  ec:	ff ff       	.word	0xffff	; ????
  ee:	ff ff       	.word	0xffff	; ????
  f0:	f8 3f       	cpi	r31, 0xF8	; 248
  f2:	ff ff       	.word	0xffff	; ????
  f4:	ff ff       	.word	0xffff	; ????
  f6:	c3 ff       	sbrs	r28, 3
  f8:	00 03       	mulsu	r16, r16
  fa:	c0 00       	.word	0x00c0	; ????
  fc:	ff ff       	.word	0xffff	; ????
  fe:	ff ff       	.word	0xffff	; ????
 100:	00 00       	nop
	...

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	e2 ee       	ldi	r30, 0xE2	; 226
 118:	f7 e0       	ldi	r31, 0x07	; 7
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a2 30       	cpi	r26, 0x02	; 2
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a2 e0       	ldi	r26, 0x02	; 2
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	a3 36       	cpi	r26, 0x63	; 99
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <main>
 13a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <byte_out>:
void photo_sample(void);

void byte_out(int8_t data)
{
	register unsigned char bit=0;
	for(bit=0; bit<=7; bit++)
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	3d c0       	rjmp	.+122    	; 0x1c0 <byte_out+0x7e>
	{
		if( (data & 0x01) && (RGB_Index & 0x01)) { SDA_1(); } else { SDA_0(); }
 146:	38 2f       	mov	r19, r24
 148:	31 70       	andi	r19, 0x01	; 1
 14a:	80 ff       	sbrs	r24, 0
 14c:	08 c0       	rjmp	.+16     	; 0x15e <byte_out+0x1c>
 14e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 152:	90 ff       	sbrs	r25, 0
 154:	04 c0       	rjmp	.+8      	; 0x15e <byte_out+0x1c>
 156:	92 b1       	in	r25, 0x02	; 2
 158:	91 60       	ori	r25, 0x01	; 1
 15a:	92 b9       	out	0x02, r25	; 2
 15c:	03 c0       	rjmp	.+6      	; 0x164 <byte_out+0x22>
 15e:	92 b1       	in	r25, 0x02	; 2
 160:	9e 7f       	andi	r25, 0xFE	; 254
 162:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 164:	92 b1       	in	r25, 0x02	; 2
 166:	92 60       	ori	r25, 0x02	; 2
 168:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 16a:	92 b1       	in	r25, 0x02	; 2
 16c:	9d 7f       	andi	r25, 0xFD	; 253
 16e:	92 b9       	out	0x02, r25	; 2
		if( (data & 0x01) && (RGB_Index & 0x02)) { SDA_1(); } else { SDA_0(); }
 170:	33 23       	and	r19, r19
 172:	41 f0       	breq	.+16     	; 0x184 <byte_out+0x42>
 174:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 178:	91 ff       	sbrs	r25, 1
 17a:	04 c0       	rjmp	.+8      	; 0x184 <byte_out+0x42>
 17c:	92 b1       	in	r25, 0x02	; 2
 17e:	91 60       	ori	r25, 0x01	; 1
 180:	92 b9       	out	0x02, r25	; 2
 182:	03 c0       	rjmp	.+6      	; 0x18a <byte_out+0x48>
 184:	92 b1       	in	r25, 0x02	; 2
 186:	9e 7f       	andi	r25, 0xFE	; 254
 188:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 18a:	92 b1       	in	r25, 0x02	; 2
 18c:	92 60       	ori	r25, 0x02	; 2
 18e:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 190:	92 b1       	in	r25, 0x02	; 2
 192:	9d 7f       	andi	r25, 0xFD	; 253
 194:	92 b9       	out	0x02, r25	; 2
		if( (data & 0x01) && (RGB_Index & 0x4)) { SDA_1(); } else { SDA_0(); }
 196:	33 23       	and	r19, r19
 198:	41 f0       	breq	.+16     	; 0x1aa <byte_out+0x68>
 19a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 19e:	92 ff       	sbrs	r25, 2
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <byte_out+0x68>
 1a2:	92 b1       	in	r25, 0x02	; 2
 1a4:	91 60       	ori	r25, 0x01	; 1
 1a6:	92 b9       	out	0x02, r25	; 2
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <byte_out+0x6e>
 1aa:	92 b1       	in	r25, 0x02	; 2
 1ac:	9e 7f       	andi	r25, 0xFE	; 254
 1ae:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 1b0:	92 b1       	in	r25, 0x02	; 2
 1b2:	92 60       	ori	r25, 0x02	; 2
 1b4:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 1b6:	92 b1       	in	r25, 0x02	; 2
 1b8:	9d 7f       	andi	r25, 0xFD	; 253
 1ba:	92 b9       	out	0x02, r25	; 2
		
		data = (data>>1);
 1bc:	85 95       	asr	r24
void photo_sample(void);

void byte_out(int8_t data)
{
	register unsigned char bit=0;
	for(bit=0; bit<=7; bit++)
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	28 30       	cpi	r18, 0x08	; 8
 1c2:	08 f2       	brcs	.-126    	; 0x146 <byte_out+0x4>
		SCL_1();
		SCL_0();
		
		data = (data>>1);
	}
}
 1c4:	08 95       	ret

000001c6 <do_rclk>:
void do_rclk(void){
	RCL_1();
 1c6:	82 b1       	in	r24, 0x02	; 2
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	82 b9       	out	0x02, r24	; 2
	RCL_0();
 1cc:	82 b1       	in	r24, 0x02	; 2
 1ce:	87 7f       	andi	r24, 0xF7	; 247
 1d0:	82 b9       	out	0x02, r24	; 2
 1d2:	08 95       	ret

000001d4 <load_font>:
}
void load_font(uint8_t character){
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
	uint8_t offset = (character * 4)+3;
 1d8:	88 0f       	add	r24, r24
 1da:	88 0f       	add	r24, r24
 1dc:	d3 e0       	ldi	r29, 0x03	; 3
 1de:	d8 0f       	add	r29, r24
	for(uint8_t i=0; i<4; i++)
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <load_font+0x24>
	{
		byte_out(flash_fonts[offset - i]);
 1e4:	ed 2f       	mov	r30, r29
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ec 1b       	sub	r30, r28
 1ea:	f1 09       	sbc	r31, r1
 1ec:	e4 53       	subi	r30, 0x34	; 52
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	84 91       	lpm	r24, Z
 1f2:	0e 94 a1 00 	call	0x142	; 0x142 <byte_out>
	RCL_1();
	RCL_0();
}
void load_font(uint8_t character){
	uint8_t offset = (character * 4)+3;
	for(uint8_t i=0; i<4; i++)
 1f6:	cf 5f       	subi	r28, 0xFF	; 255
 1f8:	c4 30       	cpi	r28, 0x04	; 4
 1fa:	a0 f3       	brcs	.-24     	; 0x1e4 <load_font+0x10>
	{
		byte_out(flash_fonts[offset - i]);
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <__vector_18>:

ISR(TIMER0_OVF_vect) {
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
	Timer_bright++;
 214:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Timer_bright>
 218:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Timer_bright+0x1>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <Timer_bright+0x1>
 222:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Timer_bright>
	//bright = sram_brigt;}
	
	if (Timer_bright>=3){
 226:	03 97       	sbiw	r24, 0x03	; 3
 228:	20 f1       	brcs	.+72     	; 0x272 <__vector_18+0x70>
		Timer_bright=0;
 22a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Timer_bright+0x1>
 22e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Timer_bright>
		Count_bright++;
 232:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Count_bright>
 236:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Count_bright+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <Count_bright+0x1>
 240:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Count_bright>
		if (sram_brigt>=Count_bright)
 244:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <sram_brigt>
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	28 17       	cp	r18, r24
 24c:	39 07       	cpc	r19, r25
 24e:	20 f0       	brcs	.+8      	; 0x258 <__vector_18+0x56>
		DISPLAY_ON();
 250:	82 b1       	in	r24, 0x02	; 2
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	82 b9       	out	0x02, r24	; 2
 256:	03 c0       	rjmp	.+6      	; 0x25e <__vector_18+0x5c>
		else
		DISPLAY_OFF();
 258:	82 b1       	in	r24, 0x02	; 2
 25a:	84 60       	ori	r24, 0x04	; 4
 25c:	82 b9       	out	0x02, r24	; 2
		if (Count_bright==16) {Count_bright=0;}
 25e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Count_bright>
 262:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Count_bright+0x1>
 266:	40 97       	sbiw	r24, 0x10	; 16
 268:	21 f4       	brne	.+8      	; 0x272 <__vector_18+0x70>
 26a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Count_bright+0x1>
 26e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Count_bright>
	}
}
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_2>:
		photo_sample();
	}
}

ISR(INT1_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	if (EICRA == 0b00001000 )
 2a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 2a6:	88 30       	cpi	r24, 0x08	; 8
 2a8:	09 f0       	breq	.+2      	; 0x2ac <__vector_2+0x28>
 2aa:	86 c0       	rjmp	.+268    	; 0x3b8 <__vector_2+0x134>
	{
		//Detecting Red Lamp Start!	
		if (!measure_red_ok && !start_measure_red)
 2ac:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <measure_red_ok>
 2b0:	81 11       	cpse	r24, r1
 2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <__vector_2+0x50>
 2b4:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <start_measure_red>
 2b8:	81 11       	cpse	r24, r1
 2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <__vector_2+0x50>
		{
			measure_count_red = 0;
 2bc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <measure_count_red>
 2c0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <measure_count_red+0x1>
 2c4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <measure_count_red+0x2>
 2c8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <measure_count_red+0x3>
			start_measure_red = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <start_measure_red>
 2d2:	43 c0       	rjmp	.+134    	; 0x35a <__vector_2+0xd6>
		}else if (start_measure_green)
 2d4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <start_measure_green>
 2d8:	88 23       	and	r24, r24
 2da:	e9 f0       	breq	.+58     	; 0x316 <__vector_2+0x92>
		{
			measure_green_ok =1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <measure_green_ok>
			start_measure_green =0;
 2e2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <start_measure_green>
			time_div = 0; countdown_timer=0;
 2e6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <time_div+0x1>
 2ea:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <time_div>
			countdown_timer =  measure_count_red;
 2ee:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <measure_count_red>
 2f2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <measure_count_red+0x1>
 2f6:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <measure_count_red+0x2>
 2fa:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <measure_count_red+0x3>
 2fe:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <countdown_timer>
 302:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <countdown_timer+0x1>
 306:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <countdown_timer+0x2>
 30a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <countdown_timer+0x3>
			RGB_Index = 2;
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 314:	22 c0       	rjmp	.+68     	; 0x35a <__vector_2+0xd6>
		}else{		
			//Starts count Red Lamp
			time_div = 0; countdown_timer=0;
 316:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <time_div+0x1>
 31a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <time_div>
			countdown_timer =  measure_count_red;
 31e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <measure_count_red>
 322:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <measure_count_red+0x1>
 326:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <measure_count_red+0x2>
 32a:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <measure_count_red+0x3>
 32e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <countdown_timer>
 332:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <countdown_timer+0x1>
 336:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <countdown_timer+0x2>
 33a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <countdown_timer+0x3>
			start_measure_red_2 = 1; measure_count_red_2 = 0;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <start_measure_red_2>
 344:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <measure_count_red_2>
 348:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <measure_count_red_2+0x1>
 34c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <measure_count_red_2+0x2>
 350:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <measure_count_red_2+0x3>
			RGB_Index = 2;
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}		
		
		if (start_measure_green_2)
 35a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <start_measure_green_2>
 35e:	88 23       	and	r24, r24
 360:	f9 f0       	breq	.+62     	; 0x3a0 <__vector_2+0x11c>
		{
			start_measure_green_2 = 0;
 362:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <start_measure_green_2>
			if (measure_count_green != measure_count_green_2 )
 366:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <measure_count_green>
 36a:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <measure_count_green+0x1>
 36e:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <measure_count_green+0x2>
 372:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <measure_count_green+0x3>
 376:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <measure_count_green_2>
 37a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <measure_count_green_2+0x1>
 37e:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <measure_count_green_2+0x2>
 382:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <measure_count_green_2+0x3>
 386:	48 17       	cp	r20, r24
 388:	59 07       	cpc	r21, r25
 38a:	6a 07       	cpc	r22, r26
 38c:	7b 07       	cpc	r23, r27
 38e:	41 f0       	breq	.+16     	; 0x3a0 <__vector_2+0x11c>
			{
				measure_count_green = measure_count_green_2;
 390:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <measure_count_green>
 394:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <measure_count_green+0x1>
 398:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <measure_count_green+0x2>
 39c:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <measure_count_green+0x3>
			}
		}	
		
		red_on = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <red_on>
		//Set Rising edge
		EICRA |= _BV(ISC11); EICRA |= _BV(ISC10);
 3a6:	e9 e6       	ldi	r30, 0x69	; 105
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	80 83       	st	Z, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	84 60       	ori	r24, 0x04	; 4
 3b4:	80 83       	st	Z, r24
 3b6:	69 c0       	rjmp	.+210    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
				
	}else if (EICRA == 0b00001100){
 3b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 3bc:	8c 30       	cpi	r24, 0x0C	; 12
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__vector_2+0x13e>
 3c0:	64 c0       	rjmp	.+200    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		//Detecting Green Lamp Start!
		if (start_measure_red)
 3c2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <start_measure_red>
 3c6:	88 23       	and	r24, r24
 3c8:	91 f0       	breq	.+36     	; 0x3ee <__vector_2+0x16a>
		{
			measure_red_ok = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <measure_red_ok>
			start_measure_red = 0;
 3d0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <start_measure_red>
		
			measure_green_ok =0;
 3d4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <measure_green_ok>
			start_measure_green = 1;
 3d8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <start_measure_green>
			measure_count_green = 0;
 3dc:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <measure_count_green>
 3e0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <measure_count_green+0x1>
 3e4:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <measure_count_green+0x2>
 3e8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <measure_count_green+0x3>
 3ec:	21 c0       	rjmp	.+66     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}else{
			//Starts count Green Lamp
			time_div = 0; countdown_timer=0;
 3ee:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <time_div+0x1>
 3f2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <time_div>
			countdown_timer =  measure_count_green;	
 3f6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <measure_count_green>
 3fa:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <measure_count_green+0x1>
 3fe:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <measure_count_green+0x2>
 402:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <measure_count_green+0x3>
 406:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <countdown_timer>
 40a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <countdown_timer+0x1>
 40e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <countdown_timer+0x2>
 412:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <countdown_timer+0x3>
			start_measure_green_2 = 1; measure_count_green_2 = 0;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <start_measure_green_2>
 41c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <measure_count_green_2>
 420:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <measure_count_green_2+0x1>
 424:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <measure_count_green_2+0x2>
 428:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <measure_count_green_2+0x3>
			RGB_Index = 1;
 42c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
		
		if (start_measure_red_2)
 430:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <start_measure_red_2>
 434:	88 23       	and	r24, r24
 436:	f9 f0       	breq	.+62     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		{
			start_measure_red_2 = 0;
 438:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <start_measure_red_2>
			if (measure_count_red != measure_count_red_2 )
 43c:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <measure_count_red>
 440:	50 91 59 01 	lds	r21, 0x0159	; 0x800159 <measure_count_red+0x1>
 444:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <measure_count_red+0x2>
 448:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <measure_count_red+0x3>
 44c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <measure_count_red_2>
 450:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <measure_count_red_2+0x1>
 454:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <measure_count_red_2+0x2>
 458:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <measure_count_red_2+0x3>
 45c:	48 17       	cp	r20, r24
 45e:	59 07       	cpc	r21, r25
 460:	6a 07       	cpc	r22, r26
 462:	7b 07       	cpc	r23, r27
 464:	41 f0       	breq	.+16     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			{
				measure_count_red = measure_count_red_2;
 466:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <measure_count_red>
 46a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <measure_count_red+0x1>
 46e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <measure_count_red+0x2>
 472:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <measure_count_red+0x3>
			}
		}
		
		red_on = 0;		
 476:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <red_on>
		//Set faling edge 
		EICRA |= _BV(ISC11); EICRA &= ~ _BV(ISC10);	
 47a:	e9 e6       	ldi	r30, 0x69	; 105
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	88 60       	ori	r24, 0x08	; 8
 482:	80 83       	st	Z, r24
 484:	80 81       	ld	r24, Z
 486:	8b 7f       	andi	r24, 0xFB	; 251
 488:	80 83       	st	Z, r24
	}
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <photo_sample>:
		_delay_ms(500);
    }
}

void photo_sample(void){
	uint8_t read_sample = ADCH;
 4a8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	if (read_sample<13){
 4ac:	8d 30       	cpi	r24, 0x0D	; 13
 4ae:	28 f0       	brcs	.+10     	; 0x4ba <photo_sample+0x12>
		read_sample = 16;
		}else{
		read_sample = 17-(read_sample / 16);
 4b0:	82 95       	swap	r24
 4b2:	8f 70       	andi	r24, 0x0F	; 15
 4b4:	91 e1       	ldi	r25, 0x11	; 17
 4b6:	98 1b       	sub	r25, r24
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <photo_sample+0x14>
}

void photo_sample(void){
	uint8_t read_sample = ADCH;
	if (read_sample<13){
		read_sample = 16;
 4ba:	90 e1       	ldi	r25, 0x10	; 16
		}else{
		read_sample = 17-(read_sample / 16);
	}
	if (samples_metter==-1){
 4bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4c0:	8f 3f       	cpi	r24, 0xFF	; 255
 4c2:	21 f4       	brne	.+8      	; 0x4cc <photo_sample+0x24>
		samples_metter=0;
 4c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		sram_brigt = read_sample;
 4c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <sram_brigt>
	}
	photo_samples[samples_metter] = read_sample;
 4cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4d0:	e8 2f       	mov	r30, r24
 4d2:	08 2e       	mov	r0, r24
 4d4:	00 0c       	add	r0, r0
 4d6:	ff 0b       	sbc	r31, r31
 4d8:	e7 5f       	subi	r30, 0xF7	; 247
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	90 83       	st	Z, r25
	samples_metter++;
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (samples_metter>=SAMPLES_MAX)
 4e4:	8c 33       	cpi	r24, 0x3C	; 60
 4e6:	54 f4       	brge	.+20     	; 0x4fc <photo_sample+0x54>
 4e8:	08 95       	ret
	{
		uint16_t A=0;
		uint8_t i;
		for (i=0;i<SAMPLES_MAX;i++){A += photo_samples[i];}
 4ea:	e8 2f       	mov	r30, r24
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	e7 5f       	subi	r30, 0xF7	; 247
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	90 81       	ld	r25, Z
 4f4:	29 0f       	add	r18, r25
 4f6:	31 1d       	adc	r19, r1
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <photo_sample+0x5a>
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	8c 33       	cpi	r24, 0x3C	; 60
 504:	90 f3       	brcs	.-28     	; 0x4ea <photo_sample+0x42>
		samples_metter=0;
 506:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		sram_brigt = A/SAMPLES_MAX;
 50a:	a9 e8       	ldi	r26, 0x89	; 137
 50c:	b8 e8       	ldi	r27, 0x88	; 136
 50e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__umulhisi3>
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	92 95       	swap	r25
 518:	82 95       	swap	r24
 51a:	8f 70       	andi	r24, 0x0F	; 15
 51c:	89 27       	eor	r24, r25
 51e:	9f 70       	andi	r25, 0x0F	; 15
 520:	89 27       	eor	r24, r25
 522:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sram_brigt>
 526:	08 95       	ret

00000528 <__vector_11>:
		DISPLAY_OFF();
		if (Count_bright==16) {Count_bright=0;}
	}
}

ISR(TIMER2_OVF_vect) {
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	cf 93       	push	r28
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	wdt_reset();
 554:	a8 95       	wdr
	
	if (start_measure_red)
 556:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <start_measure_red>
 55a:	88 23       	and	r24, r24
 55c:	a1 f0       	breq	.+40     	; 0x586 <__vector_11+0x5e>
	{
		measure_count_red++;	
 55e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <measure_count_red>
 562:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <measure_count_red+0x1>
 566:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <measure_count_red+0x2>
 56a:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <measure_count_red+0x3>
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	a1 1d       	adc	r26, r1
 572:	b1 1d       	adc	r27, r1
 574:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <measure_count_red>
 578:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <measure_count_red+0x1>
 57c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <measure_count_red+0x2>
 580:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <measure_count_red+0x3>
 584:	17 c0       	rjmp	.+46     	; 0x5b4 <__vector_11+0x8c>
	}else if (start_measure_green)
 586:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <start_measure_green>
 58a:	88 23       	and	r24, r24
 58c:	99 f0       	breq	.+38     	; 0x5b4 <__vector_11+0x8c>
	{
		measure_count_green++;	
 58e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <measure_count_green>
 592:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <measure_count_green+0x1>
 596:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <measure_count_green+0x2>
 59a:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <measure_count_green+0x3>
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	a1 1d       	adc	r26, r1
 5a2:	b1 1d       	adc	r27, r1
 5a4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <measure_count_green>
 5a8:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <measure_count_green+0x1>
 5ac:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <measure_count_green+0x2>
 5b0:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <measure_count_green+0x3>
	}
	
	if (start_measure_red_2)
 5b4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <start_measure_red_2>
 5b8:	88 23       	and	r24, r24
 5ba:	a1 f0       	breq	.+40     	; 0x5e4 <__vector_11+0xbc>
	{
		measure_count_red_2++;
 5bc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <measure_count_red_2>
 5c0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <measure_count_red_2+0x1>
 5c4:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <measure_count_red_2+0x2>
 5c8:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <measure_count_red_2+0x3>
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	a1 1d       	adc	r26, r1
 5d0:	b1 1d       	adc	r27, r1
 5d2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <measure_count_red_2>
 5d6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <measure_count_red_2+0x1>
 5da:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <measure_count_red_2+0x2>
 5de:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <measure_count_red_2+0x3>
 5e2:	17 c0       	rjmp	.+46     	; 0x612 <__vector_11+0xea>
	}else if (start_measure_green_2)
 5e4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <start_measure_green_2>
 5e8:	88 23       	and	r24, r24
 5ea:	99 f0       	breq	.+38     	; 0x612 <__vector_11+0xea>
	{
		measure_count_green_2++;
 5ec:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <measure_count_green_2>
 5f0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <measure_count_green_2+0x1>
 5f4:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <measure_count_green_2+0x2>
 5f8:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <measure_count_green_2+0x3>
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	a1 1d       	adc	r26, r1
 600:	b1 1d       	adc	r27, r1
 602:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <measure_count_green_2>
 606:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <measure_count_green_2+0x1>
 60a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <measure_count_green_2+0x2>
 60e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <measure_count_green_2+0x3>
	}
	
	if (countdown_timer && measure_green_ok)
 612:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <countdown_timer>
 616:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <countdown_timer+0x1>
 61a:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <countdown_timer+0x2>
 61e:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <countdown_timer+0x3>
 622:	00 97       	sbiw	r24, 0x00	; 0
 624:	a1 05       	cpc	r26, r1
 626:	b1 05       	cpc	r27, r1
 628:	79 f0       	breq	.+30     	; 0x648 <__vector_11+0x120>
 62a:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <measure_green_ok>
 62e:	22 23       	and	r18, r18
 630:	59 f0       	breq	.+22     	; 0x648 <__vector_11+0x120>
	{
		countdown_timer--;
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	a1 09       	sbc	r26, r1
 636:	b1 09       	sbc	r27, r1
 638:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <countdown_timer>
 63c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <countdown_timer+0x1>
 640:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <countdown_timer+0x2>
 644:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <countdown_timer+0x3>
	}
	
	if(measure_green_ok){
 648:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <measure_green_ok>
 64c:	88 23       	and	r24, r24
 64e:	69 f1       	breq	.+90     	; 0x6aa <__vector_11+0x182>
		uint8_t time_disp = countdown_timer / RTC_prescaler;	
 650:	c0 90 46 01 	lds	r12, 0x0146	; 0x800146 <countdown_timer>
 654:	d0 90 47 01 	lds	r13, 0x0147	; 0x800147 <countdown_timer+0x1>
 658:	e0 90 48 01 	lds	r14, 0x0148	; 0x800148 <countdown_timer+0x2>
 65c:	f0 90 49 01 	lds	r15, 0x0149	; 0x800149 <countdown_timer+0x3>
 660:	68 94       	set
 662:	13 f8       	bld	r1, 3
 664:	f6 94       	lsr	r15
 666:	e7 94       	ror	r14
 668:	d7 94       	ror	r13
 66a:	c7 94       	ror	r12
 66c:	16 94       	lsr	r1
 66e:	d1 f7       	brne	.-12     	; 0x664 <__vector_11+0x13c>
		if (time_disp_mem != time_disp)
 670:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <time_disp_mem>
 674:	8c 15       	cp	r24, r12
 676:	c9 f0       	breq	.+50     	; 0x6aa <__vector_11+0x182>
		{
			uint8_t A = time_disp / 10;	
 678:	cd ec       	ldi	r28, 0xCD	; 205
 67a:	cc 9e       	mul	r12, r28
 67c:	c1 2d       	mov	r28, r1
 67e:	11 24       	eor	r1, r1
 680:	c6 95       	lsr	r28
 682:	c6 95       	lsr	r28
 684:	c6 95       	lsr	r28
			load_font(time_disp - (A*10));
 686:	9c 2f       	mov	r25, r28
 688:	99 0f       	add	r25, r25
 68a:	89 2f       	mov	r24, r25
 68c:	88 0f       	add	r24, r24
 68e:	88 0f       	add	r24, r24
 690:	89 0f       	add	r24, r25
 692:	9c 2d       	mov	r25, r12
 694:	98 1b       	sub	r25, r24
 696:	89 2f       	mov	r24, r25
 698:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <load_font>
			load_font(A);
 69c:	8c 2f       	mov	r24, r28
 69e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <load_font>
			do_rclk();
 6a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <do_rclk>
			time_disp_mem = time_disp;
 6a6:	c0 92 45 01 	sts	0x0145, r12	; 0x800145 <time_disp_mem>
		}	
	}	
	
	Timer_devide_photo++;
 6aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Timer_devide_photo>
 6ae:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Timer_devide_photo+0x1>
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Timer_devide_photo+0x1>
 6b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Timer_devide_photo>
	if (Timer_devide_photo >= 48){
 6bc:	c0 97       	sbiw	r24, 0x30	; 48
 6be:	30 f0       	brcs	.+12     	; 0x6cc <__vector_11+0x1a4>
		Timer_devide_photo = 0;
 6c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Timer_devide_photo+0x1>
 6c4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Timer_devide_photo>
		photo_sample();
 6c8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <photo_sample>
	}
}
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	cf 91       	pop	r28
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	0f 90       	pop	r0
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	0f 90       	pop	r0
 6f4:	1f 90       	pop	r1
 6f6:	18 95       	reti

000006f8 <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 6f8:	99 e2       	ldi	r25, 0x29	; 41
 6fa:	88 e1       	ldi	r24, 0x18	; 24
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	a8 95       	wdr
 702:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 706:	0f be       	out	0x3f, r0	; 63
 708:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
}

int main(void)
{
	wdt_enable(WDTO_8S);
	PORTA = 0B00000100;
 70c:	94 e0       	ldi	r25, 0x04	; 4
 70e:	92 b9       	out	0x02, r25	; 2
	DDRA = 0b10011111;
 710:	8f e9       	ldi	r24, 0x9F	; 159
 712:	81 b9       	out	0x01, r24	; 1
	EIMSK |= _BV(INT1);
 714:	8d b3       	in	r24, 0x1d	; 29
 716:	82 60       	ori	r24, 0x02	; 2
 718:	8d bb       	out	0x1d, r24	; 29
	
	//Set faling edge 
    EICRA |= _BV(ISC11); //&= ~
 71a:	e9 e6       	ldi	r30, 0x69	; 105
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	88 60       	ori	r24, 0x08	; 8
 722:	80 83       	st	Z, r24
	EICRA &= ~ _BV(ISC10);
 724:	80 81       	ld	r24, Z
 726:	8b 7f       	andi	r24, 0xFB	; 251
 728:	80 83       	st	Z, r24
	
	ADMUX = 0b01100110;
 72a:	86 e6       	ldi	r24, 0x66	; 102
 72c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11100000;
 730:	80 ee       	ldi	r24, 0xE0	; 224
 732:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000100;
 736:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b10111111;
 73a:	8f eb       	ldi	r24, 0xBF	; 191
 73c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	ASSR |= 1<<AS2;
 740:	e6 eb       	ldi	r30, 0xB6	; 182
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	80 62       	ori	r24, 0x20	; 32
 748:	80 83       	st	Z, r24
	//TCCR2B = 0b00000101; //start timer for seconds
	TCCR2B = 0b00000010; //start timer for seconds
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1;
 750:	c1 e0       	ldi	r28, 0x01	; 1
 752:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	TCCR0B = 0b00000010;
 756:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1;
 758:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	80 e7       	ldi	r24, 0x70	; 112
 760:	92 e0       	ldi	r25, 0x02	; 2
 762:	21 50       	subi	r18, 0x01	; 1
 764:	80 40       	sbci	r24, 0x00	; 0
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	e1 f7       	brne	.-8      	; 0x762 <main+0x6a>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <main+0x74>
 76c:	00 00       	nop
		
	_delay_ms(100);
	photo_sample();
 76e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <photo_sample>
	
	RGB_Index = 0B00000111;
 772:	87 e0       	ldi	r24, 0x07	; 7
 774:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	load_font(11); //'-'
 778:	8b e0       	ldi	r24, 0x0B	; 11
 77a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <load_font>
	load_font(11); //'-'
 77e:	8b e0       	ldi	r24, 0x0B	; 11
 780:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <load_font>
	do_rclk();
 784:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <do_rclk>
	DISPLAY_ON();
 788:	82 b1       	in	r24, 0x02	; 2
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	82 b9       	out	0x02, r24	; 2
 78e:	2f ef       	ldi	r18, 0xFF	; 255
 790:	89 e6       	ldi	r24, 0x69	; 105
 792:	98 e1       	ldi	r25, 0x18	; 24
 794:	21 50       	subi	r18, 0x01	; 1
 796:	80 40       	sbci	r24, 0x00	; 0
 798:	90 40       	sbci	r25, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x9c>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0xa6>
 79e:	00 00       	nop
	_delay_ms(1000);
	RGB_Index = 1;
 7a0:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
	
	EIFR |= _BV( INTF1);
 7a4:	8c b3       	in	r24, 0x1c	; 28
 7a6:	82 60       	ori	r24, 0x02	; 2
 7a8:	8c bb       	out	0x1c, r24	; 28
	sei();
 7aa:	78 94       	sei
 7ac:	2f ef       	ldi	r18, 0xFF	; 255
 7ae:	84 e3       	ldi	r24, 0x34	; 52
 7b0:	9c e0       	ldi	r25, 0x0C	; 12
 7b2:	21 50       	subi	r18, 0x01	; 1
 7b4:	80 40       	sbci	r24, 0x00	; 0
 7b6:	90 40       	sbci	r25, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0xba>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0xc4>
 7bc:	00 00       	nop
 7be:	f6 cf       	rjmp	.-20     	; 0x7ac <main+0xb4>

000007c0 <__umulhisi3>:
 7c0:	a2 9f       	mul	r26, r18
 7c2:	b0 01       	movw	r22, r0
 7c4:	b3 9f       	mul	r27, r19
 7c6:	c0 01       	movw	r24, r0
 7c8:	a3 9f       	mul	r26, r19
 7ca:	70 0d       	add	r23, r0
 7cc:	81 1d       	adc	r24, r1
 7ce:	11 24       	eor	r1, r1
 7d0:	91 1d       	adc	r25, r1
 7d2:	b2 9f       	mul	r27, r18
 7d4:	70 0d       	add	r23, r0
 7d6:	81 1d       	adc	r24, r1
 7d8:	11 24       	eor	r1, r1
 7da:	91 1d       	adc	r25, r1
 7dc:	08 95       	ret

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
