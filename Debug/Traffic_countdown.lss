
Traffic_countdown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  000006e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e46  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af3  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000697  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a0  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_2>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000cc <__trampolines_end>:
  cc:	ff fc       	.word	0xfcff	; ????
  ce:	3f ff       	.word	0xff3f	; ????
  d0:	00 00       	nop
  d2:	03 ff       	sbrs	r16, 3
  d4:	07 ff       	sbrs	r16, 7
  d6:	ff e0       	ldi	r31, 0x0F	; 15
  d8:	00 3f       	cpi	r16, 0xF0	; 240
  da:	ff ff       	.word	0xffff	; ????
  dc:	f8 03       	fmulsu	r23, r16
  de:	c3 ff       	sbrs	r28, 3
  e0:	f8 3f       	cpi	r31, 0xF8	; 248
  e2:	fc 1f       	adc	r31, r28
  e4:	ff ff       	.word	0xffff	; ????
  e6:	fc 1f       	adc	r31, r28
  e8:	00 3c       	cpi	r16, 0xC0	; 192
  ea:	03 ff       	sbrs	r16, 3
  ec:	ff ff       	.word	0xffff	; ????
  ee:	ff ff       	.word	0xffff	; ????
  f0:	f8 3f       	cpi	r31, 0xF8	; 248
  f2:	ff ff       	.word	0xffff	; ????
  f4:	ff ff       	.word	0xffff	; ????
  f6:	c3 ff       	sbrs	r28, 3
  f8:	00 03       	mulsu	r16, r16
  fa:	c0 00       	.word	0x00c0	; ????
  fc:	ff ff       	.word	0xffff	; ????
  fe:	ff ff       	.word	0xffff	; ????
 100:	00 00       	nop
	...

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_clear_bss>:
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	af 31       	cpi	r26, 0x1F	; 31
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 df 02 	call	0x5be	; 0x5be <main>
 124:	0c 94 34 03 	jmp	0x668	; 0x668 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <byte_out>:
uint8_t RGB_Index = 0; // Bit 2 = Blue -  Bit 1 = Green / Bit 0 = Red

void byte_out(int8_t data)
{
	register unsigned char bit=0;
	for(bit=0; bit<=7; bit++)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	3d c0       	rjmp	.+122    	; 0x1aa <byte_out+0x7e>
	{
		if( (data & 0x01) && (RGB_Index & 0x01)) { SDA_1(); } else { SDA_0(); }
 130:	38 2f       	mov	r19, r24
 132:	31 70       	andi	r19, 0x01	; 1
 134:	80 ff       	sbrs	r24, 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <byte_out+0x1c>
 138:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 13c:	90 ff       	sbrs	r25, 0
 13e:	04 c0       	rjmp	.+8      	; 0x148 <byte_out+0x1c>
 140:	92 b1       	in	r25, 0x02	; 2
 142:	91 60       	ori	r25, 0x01	; 1
 144:	92 b9       	out	0x02, r25	; 2
 146:	03 c0       	rjmp	.+6      	; 0x14e <byte_out+0x22>
 148:	92 b1       	in	r25, 0x02	; 2
 14a:	9e 7f       	andi	r25, 0xFE	; 254
 14c:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 14e:	92 b1       	in	r25, 0x02	; 2
 150:	92 60       	ori	r25, 0x02	; 2
 152:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 154:	92 b1       	in	r25, 0x02	; 2
 156:	9d 7f       	andi	r25, 0xFD	; 253
 158:	92 b9       	out	0x02, r25	; 2
		if( (data & 0x01) && (RGB_Index & 0x02)) { SDA_1(); } else { SDA_0(); }
 15a:	33 23       	and	r19, r19
 15c:	41 f0       	breq	.+16     	; 0x16e <byte_out+0x42>
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 162:	91 ff       	sbrs	r25, 1
 164:	04 c0       	rjmp	.+8      	; 0x16e <byte_out+0x42>
 166:	92 b1       	in	r25, 0x02	; 2
 168:	91 60       	ori	r25, 0x01	; 1
 16a:	92 b9       	out	0x02, r25	; 2
 16c:	03 c0       	rjmp	.+6      	; 0x174 <byte_out+0x48>
 16e:	92 b1       	in	r25, 0x02	; 2
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 174:	92 b1       	in	r25, 0x02	; 2
 176:	92 60       	ori	r25, 0x02	; 2
 178:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 17a:	92 b1       	in	r25, 0x02	; 2
 17c:	9d 7f       	andi	r25, 0xFD	; 253
 17e:	92 b9       	out	0x02, r25	; 2
		if( (data & 0x01) && (RGB_Index & 0x4)) { SDA_1(); } else { SDA_0(); }
 180:	33 23       	and	r19, r19
 182:	41 f0       	breq	.+16     	; 0x194 <byte_out+0x68>
 184:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 188:	92 ff       	sbrs	r25, 2
 18a:	04 c0       	rjmp	.+8      	; 0x194 <byte_out+0x68>
 18c:	92 b1       	in	r25, 0x02	; 2
 18e:	91 60       	ori	r25, 0x01	; 1
 190:	92 b9       	out	0x02, r25	; 2
 192:	03 c0       	rjmp	.+6      	; 0x19a <byte_out+0x6e>
 194:	92 b1       	in	r25, 0x02	; 2
 196:	9e 7f       	andi	r25, 0xFE	; 254
 198:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 19a:	92 b1       	in	r25, 0x02	; 2
 19c:	92 60       	ori	r25, 0x02	; 2
 19e:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 1a0:	92 b1       	in	r25, 0x02	; 2
 1a2:	9d 7f       	andi	r25, 0xFD	; 253
 1a4:	92 b9       	out	0x02, r25	; 2
		
		data = (data>>1);
 1a6:	85 95       	asr	r24
uint8_t RGB_Index = 0; // Bit 2 = Blue -  Bit 1 = Green / Bit 0 = Red

void byte_out(int8_t data)
{
	register unsigned char bit=0;
	for(bit=0; bit<=7; bit++)
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	28 30       	cpi	r18, 0x08	; 8
 1ac:	08 f2       	brcs	.-126    	; 0x130 <byte_out+0x4>
		SCL_1();
		SCL_0();
		
		data = (data>>1);
	}
}
 1ae:	08 95       	ret

000001b0 <do_rclk>:
void do_rclk(void){
	RCL_1();
 1b0:	82 b1       	in	r24, 0x02	; 2
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	82 b9       	out	0x02, r24	; 2
	RCL_0();
 1b6:	82 b1       	in	r24, 0x02	; 2
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	82 b9       	out	0x02, r24	; 2
 1bc:	08 95       	ret

000001be <load_font>:
}
void load_font(uint8_t character){
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	uint8_t offset = (character * 4)+3;
 1c2:	88 0f       	add	r24, r24
 1c4:	88 0f       	add	r24, r24
 1c6:	d3 e0       	ldi	r29, 0x03	; 3
 1c8:	d8 0f       	add	r29, r24
	for(uint8_t i=0; i<4; i++)
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <load_font+0x24>
	{
		byte_out(flash_fonts[offset - i]);
 1ce:	ed 2f       	mov	r30, r29
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ec 1b       	sub	r30, r28
 1d4:	f1 09       	sbc	r31, r1
 1d6:	e4 53       	subi	r30, 0x34	; 52
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	84 91       	lpm	r24, Z
 1dc:	0e 94 96 00 	call	0x12c	; 0x12c <byte_out>
	RCL_1();
	RCL_0();
}
void load_font(uint8_t character){
	uint8_t offset = (character * 4)+3;
	for(uint8_t i=0; i<4; i++)
 1e0:	cf 5f       	subi	r28, 0xFF	; 255
 1e2:	c4 30       	cpi	r28, 0x04	; 4
 1e4:	a0 f3       	brcs	.-24     	; 0x1ce <load_font+0x10>
	{
		byte_out(flash_fonts[offset - i]);
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <__vector_11>:

ISR(TIMER2_OVF_vect) {
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	cf 93       	push	r28
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	wdt_reset();
 218:	a8 95       	wdr
	
	if (start_measure_red)
 21a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <start_measure_red>
 21e:	88 23       	and	r24, r24
 220:	a1 f0       	breq	.+40     	; 0x24a <__vector_11+0x5e>
	{
		measure_count_red++;	
 222:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <measure_count_red>
 226:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <measure_count_red+0x1>
 22a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <measure_count_red+0x2>
 22e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <measure_count_red+0x3>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	a1 1d       	adc	r26, r1
 236:	b1 1d       	adc	r27, r1
 238:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <measure_count_red>
 23c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <measure_count_red+0x1>
 240:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <measure_count_red+0x2>
 244:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <measure_count_red+0x3>
 248:	17 c0       	rjmp	.+46     	; 0x278 <__vector_11+0x8c>
	}else if (start_measure_green)
 24a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <start_measure_green>
 24e:	88 23       	and	r24, r24
 250:	99 f0       	breq	.+38     	; 0x278 <__vector_11+0x8c>
	{
		measure_count_green++;	
 252:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <measure_count_green>
 256:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <measure_count_green+0x1>
 25a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <measure_count_green+0x2>
 25e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <measure_count_green+0x3>
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
 268:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <measure_count_green>
 26c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <measure_count_green+0x1>
 270:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <measure_count_green+0x2>
 274:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <measure_count_green+0x3>
	}
	
	if (start_measure_red_2)
 278:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <start_measure_red_2>
 27c:	88 23       	and	r24, r24
 27e:	a1 f0       	breq	.+40     	; 0x2a8 <__vector_11+0xbc>
	{
		measure_count_red_2++;
 280:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <measure_count_red_2>
 284:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <measure_count_red_2+0x1>
 288:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <measure_count_red_2+0x2>
 28c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <measure_count_red_2+0x3>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	a1 1d       	adc	r26, r1
 294:	b1 1d       	adc	r27, r1
 296:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <measure_count_red_2>
 29a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <measure_count_red_2+0x1>
 29e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <measure_count_red_2+0x2>
 2a2:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <measure_count_red_2+0x3>
 2a6:	17 c0       	rjmp	.+46     	; 0x2d6 <__vector_11+0xea>
	}else if (start_measure_green_2)
 2a8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <start_measure_green_2>
 2ac:	88 23       	and	r24, r24
 2ae:	99 f0       	breq	.+38     	; 0x2d6 <__vector_11+0xea>
	{
		measure_count_green_2++;
 2b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <measure_count_green_2>
 2b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <measure_count_green_2+0x1>
 2b8:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <measure_count_green_2+0x2>
 2bc:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <measure_count_green_2+0x3>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	a1 1d       	adc	r26, r1
 2c4:	b1 1d       	adc	r27, r1
 2c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <measure_count_green_2>
 2ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <measure_count_green_2+0x1>
 2ce:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <measure_count_green_2+0x2>
 2d2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <measure_count_green_2+0x3>
	}
	
	if (countdown_timer && measure_green_ok)
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countdown_timer>
 2da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <countdown_timer+0x1>
 2de:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <countdown_timer+0x2>
 2e2:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <countdown_timer+0x3>
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	a1 05       	cpc	r26, r1
 2ea:	b1 05       	cpc	r27, r1
 2ec:	79 f0       	breq	.+30     	; 0x30c <__vector_11+0x120>
 2ee:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <measure_green_ok>
 2f2:	22 23       	and	r18, r18
 2f4:	59 f0       	breq	.+22     	; 0x30c <__vector_11+0x120>
	{
		countdown_timer--;
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	a1 09       	sbc	r26, r1
 2fa:	b1 09       	sbc	r27, r1
 2fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countdown_timer>
 300:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <countdown_timer+0x1>
 304:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <countdown_timer+0x2>
 308:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <countdown_timer+0x3>
	}
	
	if(measure_green_ok){
 30c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <measure_green_ok>
 310:	88 23       	and	r24, r24
 312:	69 f1       	breq	.+90     	; 0x36e <__vector_11+0x182>
		uint8_t time_disp = countdown_timer / RTC_prescaler;	
 314:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <countdown_timer>
 318:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <countdown_timer+0x1>
 31c:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <countdown_timer+0x2>
 320:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <countdown_timer+0x3>
 324:	68 94       	set
 326:	13 f8       	bld	r1, 3
 328:	f6 94       	lsr	r15
 32a:	e7 94       	ror	r14
 32c:	d7 94       	ror	r13
 32e:	c7 94       	ror	r12
 330:	16 94       	lsr	r1
 332:	d1 f7       	brne	.-12     	; 0x328 <__vector_11+0x13c>
		if (time_disp_mem != time_disp)
 334:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_disp_mem>
 338:	8c 15       	cp	r24, r12
 33a:	c9 f0       	breq	.+50     	; 0x36e <__vector_11+0x182>
		{
			uint8_t A = time_disp / 10;	
 33c:	cd ec       	ldi	r28, 0xCD	; 205
 33e:	cc 9e       	mul	r12, r28
 340:	c1 2d       	mov	r28, r1
 342:	11 24       	eor	r1, r1
 344:	c6 95       	lsr	r28
 346:	c6 95       	lsr	r28
 348:	c6 95       	lsr	r28
			load_font(time_disp - (A*10));
 34a:	9c 2f       	mov	r25, r28
 34c:	99 0f       	add	r25, r25
 34e:	89 2f       	mov	r24, r25
 350:	88 0f       	add	r24, r24
 352:	88 0f       	add	r24, r24
 354:	89 0f       	add	r24, r25
 356:	9c 2d       	mov	r25, r12
 358:	98 1b       	sub	r25, r24
 35a:	89 2f       	mov	r24, r25
 35c:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
			load_font(A);
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
			do_rclk();
 366:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <do_rclk>
			time_disp_mem = time_disp;
 36a:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <time_disp_mem>
		}
				
		
	}	
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	cf 91       	pop	r28
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_2>:

ISR(INT1_vect)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	if (EICRA == 0b00001000 )
 3b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__vector_2+0x28>
 3c0:	86 c0       	rjmp	.+268    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
	{
		//Detecting Red Lamp Start!	
		if (!measure_red_ok && !start_measure_red)
 3c2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <measure_red_ok>
 3c6:	81 11       	cpse	r24, r1
 3c8:	10 c0       	rjmp	.+32     	; 0x3ea <__vector_2+0x50>
 3ca:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <start_measure_red>
 3ce:	81 11       	cpse	r24, r1
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <__vector_2+0x50>
		{
			measure_count_red = 0;
 3d2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <measure_count_red>
 3d6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <measure_count_red+0x1>
 3da:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <measure_count_red+0x2>
 3de:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <measure_count_red+0x3>
			start_measure_red = 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <start_measure_red>
 3e8:	43 c0       	rjmp	.+134    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		}else if (start_measure_green)
 3ea:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <start_measure_green>
 3ee:	88 23       	and	r24, r24
 3f0:	e9 f0       	breq	.+58     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			measure_green_ok =1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <measure_green_ok>
			start_measure_green =0;
 3f8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <start_measure_green>
			time_div = 0; countdown_timer=0;
 3fc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <time_div+0x1>
 400:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <time_div>
			countdown_timer =  measure_count_red;
 404:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <measure_count_red>
 408:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <measure_count_red+0x1>
 40c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <measure_count_red+0x2>
 410:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <measure_count_red+0x3>
 414:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countdown_timer>
 418:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <countdown_timer+0x1>
 41c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <countdown_timer+0x2>
 420:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <countdown_timer+0x3>
			RGB_Index = 2;
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 42a:	22 c0       	rjmp	.+68     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		}else{		
			//Starts count Red Lamp
			time_div = 0; countdown_timer=0;
 42c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <time_div+0x1>
 430:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <time_div>
			countdown_timer =  measure_count_red;
 434:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <measure_count_red>
 438:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <measure_count_red+0x1>
 43c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <measure_count_red+0x2>
 440:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <measure_count_red+0x3>
 444:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countdown_timer>
 448:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <countdown_timer+0x1>
 44c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <countdown_timer+0x2>
 450:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <countdown_timer+0x3>
			start_measure_red_2 = 1; measure_count_red_2 = 0;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <start_measure_red_2>
 45a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <measure_count_red_2>
 45e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <measure_count_red_2+0x1>
 462:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <measure_count_red_2+0x2>
 466:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <measure_count_red_2+0x3>
			RGB_Index = 2;
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}		
		
		if (start_measure_green_2)
 470:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <start_measure_green_2>
 474:	88 23       	and	r24, r24
 476:	f9 f0       	breq	.+62     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			start_measure_green_2 = 0;
 478:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <start_measure_green_2>
			if (measure_count_green != measure_count_green_2 )
 47c:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <measure_count_green>
 480:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <measure_count_green+0x1>
 484:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <measure_count_green+0x2>
 488:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <measure_count_green+0x3>
 48c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <measure_count_green_2>
 490:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <measure_count_green_2+0x1>
 494:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <measure_count_green_2+0x2>
 498:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <measure_count_green_2+0x3>
 49c:	48 17       	cp	r20, r24
 49e:	59 07       	cpc	r21, r25
 4a0:	6a 07       	cpc	r22, r26
 4a2:	7b 07       	cpc	r23, r27
 4a4:	41 f0       	breq	.+16     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
			{
				measure_count_green = measure_count_green_2;
 4a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <measure_count_green>
 4aa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <measure_count_green+0x1>
 4ae:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <measure_count_green+0x2>
 4b2:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <measure_count_green+0x3>
			}
		}
		
		
		red_on = 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <red_on>
		//Set Rising edge
		EICRA |= _BV(ISC11); EICRA |= _BV(ISC10);
 4bc:	e9 e6       	ldi	r30, 0x69	; 105
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	80 83       	st	Z, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	84 60       	ori	r24, 0x04	; 4
 4ca:	80 83       	st	Z, r24
 4cc:	69 c0       	rjmp	.+210    	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
		
		
	}else if (EICRA == 0b00001100){
 4ce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 4d2:	8c 30       	cpi	r24, 0x0C	; 12
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d6:	64 c0       	rjmp	.+200    	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
		//Detecting Green Lamp Start!
		if (start_measure_red)
 4d8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <start_measure_red>
 4dc:	88 23       	and	r24, r24
 4de:	91 f0       	breq	.+36     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		{
			measure_red_ok = 1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <measure_red_ok>
			start_measure_red = 0;
 4e6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <start_measure_red>
		
			measure_green_ok =0;
 4ea:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <measure_green_ok>
			start_measure_green = 1;
 4ee:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <start_measure_green>
			measure_count_green = 0;
 4f2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <measure_count_green>
 4f6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <measure_count_green+0x1>
 4fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <measure_count_green+0x2>
 4fe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <measure_count_green+0x3>
 502:	21 c0       	rjmp	.+66     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
		}else{
			//Starts count Green Lamp
			time_div = 0; countdown_timer=0;
 504:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <time_div+0x1>
 508:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <time_div>
			countdown_timer =  measure_count_green;	
 50c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <measure_count_green>
 510:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <measure_count_green+0x1>
 514:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <measure_count_green+0x2>
 518:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <measure_count_green+0x3>
 51c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countdown_timer>
 520:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <countdown_timer+0x1>
 524:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <countdown_timer+0x2>
 528:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <countdown_timer+0x3>
			start_measure_green_2 = 1; measure_count_green_2 = 0;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <start_measure_green_2>
 532:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <measure_count_green_2>
 536:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <measure_count_green_2+0x1>
 53a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <measure_count_green_2+0x2>
 53e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <measure_count_green_2+0x3>
			RGB_Index = 1;
 542:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		
		if (start_measure_red_2)
 546:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <start_measure_red_2>
 54a:	88 23       	and	r24, r24
 54c:	f9 f0       	breq	.+62     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
		{
			start_measure_red_2 = 0;
 54e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <start_measure_red_2>
			if (measure_count_red != measure_count_red_2 )
 552:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <measure_count_red>
 556:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <measure_count_red+0x1>
 55a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <measure_count_red+0x2>
 55e:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <measure_count_red+0x3>
 562:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <measure_count_red_2>
 566:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <measure_count_red_2+0x1>
 56a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <measure_count_red_2+0x2>
 56e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <measure_count_red_2+0x3>
 572:	48 17       	cp	r20, r24
 574:	59 07       	cpc	r21, r25
 576:	6a 07       	cpc	r22, r26
 578:	7b 07       	cpc	r23, r27
 57a:	41 f0       	breq	.+16     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
			{
				measure_count_red = measure_count_red_2;
 57c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <measure_count_red>
 580:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <measure_count_red+0x1>
 584:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <measure_count_red+0x2>
 588:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <measure_count_red+0x3>
			}
		}
		
		red_on = 0;		
 58c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <red_on>
		//Set faling edge 
		EICRA |= _BV(ISC11); EICRA &= ~ _BV(ISC10);
 590:	e9 e6       	ldi	r30, 0x69	; 105
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	88 60       	ori	r24, 0x08	; 8
 598:	80 83       	st	Z, r24
 59a:	80 81       	ld	r24, Z
 59c:	8b 7f       	andi	r24, 0xFB	; 251
 59e:	80 83       	st	Z, r24
		
	}
	
	
	
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 5be:	99 e2       	ldi	r25, 0x29	; 41
 5c0:	88 e1       	ldi	r24, 0x18	; 24
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	a8 95       	wdr
 5c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>


int main(void)
{
	wdt_enable(WDTO_8S);
	PORTA = 0B00000100;
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	82 b9       	out	0x02, r24	; 2
	DDRA = 0b10011111;
 5d6:	8f e9       	ldi	r24, 0x9F	; 159
 5d8:	81 b9       	out	0x01, r24	; 1
	EIMSK |= _BV(INT1);
 5da:	8d b3       	in	r24, 0x1d	; 29
 5dc:	82 60       	ori	r24, 0x02	; 2
 5de:	8d bb       	out	0x1d, r24	; 29
	
	//Set faling edge 
    EICRA |= _BV(ISC11); //&= ~
 5e0:	e9 e6       	ldi	r30, 0x69	; 105
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	80 83       	st	Z, r24
	EICRA &= ~ _BV(ISC10);
 5ea:	80 81       	ld	r24, Z
 5ec:	8b 7f       	andi	r24, 0xFB	; 251
 5ee:	80 83       	st	Z, r24
	
	
	ASSR |= 1<<AS2;
 5f0:	e6 eb       	ldi	r30, 0xB6	; 182
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	80 62       	ori	r24, 0x20	; 32
 5f8:	80 83       	st	Z, r24
	//TCCR2B = 0b00000101; //start timer for seconds
	TCCR2B = 0b00000010; //start timer for seconds
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1;
 600:	c1 e0       	ldi	r28, 0x01	; 1
 602:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	80 e7       	ldi	r24, 0x70	; 112
 60a:	92 e0       	ldi	r25, 0x02	; 2
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <main+0x4e>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x58>
 616:	00 00       	nop
	_delay_ms(100);
	
	RGB_Index = 0B00000111;
 618:	87 e0       	ldi	r24, 0x07	; 7
 61a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	load_font(11); //'-'
 61e:	8b e0       	ldi	r24, 0x0B	; 11
 620:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
	load_font(11); //'-'
 624:	8b e0       	ldi	r24, 0x0B	; 11
 626:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
	do_rclk();
 62a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <do_rclk>
	DISPLAY_ON();
 62e:	82 b1       	in	r24, 0x02	; 2
 630:	8b 7f       	andi	r24, 0xFB	; 251
 632:	82 b9       	out	0x02, r24	; 2
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	89 e6       	ldi	r24, 0x69	; 105
 638:	98 e1       	ldi	r25, 0x18	; 24
 63a:	21 50       	subi	r18, 0x01	; 1
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x7c>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x86>
 644:	00 00       	nop
	_delay_ms(1000);
	RGB_Index = 1;
 646:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
	
	EIFR |= _BV( INTF1);
 64a:	8c b3       	in	r24, 0x1c	; 28
 64c:	82 60       	ori	r24, 0x02	; 2
 64e:	8c bb       	out	0x1c, r24	; 28
	sei();
 650:	78 94       	sei
 652:	2f ef       	ldi	r18, 0xFF	; 255
 654:	84 e3       	ldi	r24, 0x34	; 52
 656:	9c e0       	ldi	r25, 0x0C	; 12
 658:	21 50       	subi	r18, 0x01	; 1
 65a:	80 40       	sbci	r24, 0x00	; 0
 65c:	90 40       	sbci	r25, 0x00	; 0
 65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x9a>
 660:	00 c0       	rjmp	.+0      	; 0x662 <main+0xa4>
 662:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {	
		_delay_ms(500);
		wdt_reset();
 664:	a8 95       	wdr
 666:	f5 cf       	rjmp	.-22     	; 0x652 <main+0x94>

00000668 <_exit>:
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
