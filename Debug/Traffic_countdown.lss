
Traffic_countdown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000508  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d66  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0f  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c4  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000359  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_1>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000cc <__trampolines_end>:
  cc:	ff fc       	.word	0xfcff	; ????
  ce:	3f ff       	.word	0xff3f	; ????
  d0:	00 00       	nop
  d2:	03 ff       	sbrs	r16, 3
  d4:	07 ff       	sbrs	r16, 7
  d6:	ff e0       	ldi	r31, 0x0F	; 15
  d8:	00 3f       	cpi	r16, 0xF0	; 240
  da:	ff ff       	.word	0xffff	; ????
  dc:	f8 03       	fmulsu	r23, r16
  de:	c3 ff       	sbrs	r28, 3
  e0:	f8 3f       	cpi	r31, 0xF8	; 248
  e2:	fc 1f       	adc	r31, r28
  e4:	ff ff       	.word	0xffff	; ????
  e6:	fc 1f       	adc	r31, r28
  e8:	00 3c       	cpi	r16, 0xC0	; 192
  ea:	03 ff       	sbrs	r16, 3
  ec:	ff ff       	.word	0xffff	; ????
  ee:	ff ff       	.word	0xffff	; ????
  f0:	f8 3f       	cpi	r31, 0xF8	; 248
  f2:	ff ff       	.word	0xffff	; ????
  f4:	ff ff       	.word	0xffff	; ????
  f6:	c3 ff       	sbrs	r28, 3
  f8:	00 03       	mulsu	r16, r16
  fa:	c0 00       	.word	0x00c0	; ????
  fc:	ff ff       	.word	0xffff	; ????
  fe:	ff ff       	.word	0xffff	; ????
 100:	00 00       	nop
	...

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_clear_bss>:
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	aa 30       	cpi	r26, 0x0A	; 10
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
 124:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <byte_out>:
uint8_t RGB_Index = 0; // Bit 2 = Blue -  Bit 1 = Green / Bit 0 = Red

void byte_out(int8_t data)
{
	register unsigned char bit=0;
	for(bit=0; bit<=7; bit++)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	3d c0       	rjmp	.+122    	; 0x1aa <byte_out+0x7e>
	{
		if( (data & 0x01) && (RGB_Index & 0x01)) { SDA_1(); } else { SDA_0(); }
 130:	38 2f       	mov	r19, r24
 132:	31 70       	andi	r19, 0x01	; 1
 134:	80 ff       	sbrs	r24, 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <byte_out+0x1c>
 138:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	90 ff       	sbrs	r25, 0
 13e:	04 c0       	rjmp	.+8      	; 0x148 <byte_out+0x1c>
 140:	92 b1       	in	r25, 0x02	; 2
 142:	91 60       	ori	r25, 0x01	; 1
 144:	92 b9       	out	0x02, r25	; 2
 146:	03 c0       	rjmp	.+6      	; 0x14e <byte_out+0x22>
 148:	92 b1       	in	r25, 0x02	; 2
 14a:	9e 7f       	andi	r25, 0xFE	; 254
 14c:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 14e:	92 b1       	in	r25, 0x02	; 2
 150:	92 60       	ori	r25, 0x02	; 2
 152:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 154:	92 b1       	in	r25, 0x02	; 2
 156:	9d 7f       	andi	r25, 0xFD	; 253
 158:	92 b9       	out	0x02, r25	; 2
		if( (data & 0x01) && (RGB_Index & 0x02)) { SDA_1(); } else { SDA_0(); }
 15a:	33 23       	and	r19, r19
 15c:	41 f0       	breq	.+16     	; 0x16e <byte_out+0x42>
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	91 ff       	sbrs	r25, 1
 164:	04 c0       	rjmp	.+8      	; 0x16e <byte_out+0x42>
 166:	92 b1       	in	r25, 0x02	; 2
 168:	91 60       	ori	r25, 0x01	; 1
 16a:	92 b9       	out	0x02, r25	; 2
 16c:	03 c0       	rjmp	.+6      	; 0x174 <byte_out+0x48>
 16e:	92 b1       	in	r25, 0x02	; 2
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 174:	92 b1       	in	r25, 0x02	; 2
 176:	92 60       	ori	r25, 0x02	; 2
 178:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 17a:	92 b1       	in	r25, 0x02	; 2
 17c:	9d 7f       	andi	r25, 0xFD	; 253
 17e:	92 b9       	out	0x02, r25	; 2
		if( (data & 0x01) && (RGB_Index & 0x4)) { SDA_1(); } else { SDA_0(); }
 180:	33 23       	and	r19, r19
 182:	41 f0       	breq	.+16     	; 0x194 <byte_out+0x68>
 184:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	92 ff       	sbrs	r25, 2
 18a:	04 c0       	rjmp	.+8      	; 0x194 <byte_out+0x68>
 18c:	92 b1       	in	r25, 0x02	; 2
 18e:	91 60       	ori	r25, 0x01	; 1
 190:	92 b9       	out	0x02, r25	; 2
 192:	03 c0       	rjmp	.+6      	; 0x19a <byte_out+0x6e>
 194:	92 b1       	in	r25, 0x02	; 2
 196:	9e 7f       	andi	r25, 0xFE	; 254
 198:	92 b9       	out	0x02, r25	; 2
		SCL_1();
 19a:	92 b1       	in	r25, 0x02	; 2
 19c:	92 60       	ori	r25, 0x02	; 2
 19e:	92 b9       	out	0x02, r25	; 2
		SCL_0();
 1a0:	92 b1       	in	r25, 0x02	; 2
 1a2:	9d 7f       	andi	r25, 0xFD	; 253
 1a4:	92 b9       	out	0x02, r25	; 2
		
		data = (data>>1);
 1a6:	85 95       	asr	r24
uint8_t RGB_Index = 0; // Bit 2 = Blue -  Bit 1 = Green / Bit 0 = Red

void byte_out(int8_t data)
{
	register unsigned char bit=0;
	for(bit=0; bit<=7; bit++)
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	28 30       	cpi	r18, 0x08	; 8
 1ac:	08 f2       	brcs	.-126    	; 0x130 <byte_out+0x4>
		SCL_1();
		SCL_0();
		
		data = (data>>1);
	}
}
 1ae:	08 95       	ret

000001b0 <do_rclk>:
void do_rclk(void){
	RCL_1();
 1b0:	82 b1       	in	r24, 0x02	; 2
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	82 b9       	out	0x02, r24	; 2
	RCL_0();
 1b6:	82 b1       	in	r24, 0x02	; 2
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	82 b9       	out	0x02, r24	; 2
 1bc:	08 95       	ret

000001be <load_font>:
}
char load_font(uint8_t character){
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	uint8_t offset = (character * 4)+3;
 1c2:	88 0f       	add	r24, r24
 1c4:	88 0f       	add	r24, r24
 1c6:	d3 e0       	ldi	r29, 0x03	; 3
 1c8:	d8 0f       	add	r29, r24
	for(uint8_t i=0; i<4; i++)
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <load_font+0x24>
	{
		byte_out(flash_fonts[offset - i]);
 1ce:	ed 2f       	mov	r30, r29
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ec 1b       	sub	r30, r28
 1d4:	f1 09       	sbc	r31, r1
 1d6:	e4 53       	subi	r30, 0x34	; 52
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	84 91       	lpm	r24, Z
 1dc:	0e 94 96 00 	call	0x12c	; 0x12c <byte_out>
	RCL_1();
	RCL_0();
}
char load_font(uint8_t character){
	uint8_t offset = (character * 4)+3;
	for(uint8_t i=0; i<4; i++)
 1e0:	cf 5f       	subi	r28, 0xFF	; 255
 1e2:	c4 30       	cpi	r28, 0x04	; 4
 1e4:	a0 f3       	brcs	.-24     	; 0x1ce <load_font+0x10>
	{
		byte_out(flash_fonts[offset - i]);
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <__vector_11>:

ISR(TIMER2_OVF_vect) {
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 92       	push	r8
 1f8:	9f 92       	push	r9
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	cf 93       	push	r28
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	wdt_reset();
 222:	a8 95       	wdr
	
	if (start_measure && !measure_ok)
 224:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <start_measure>
 228:	88 23       	and	r24, r24
 22a:	49 f1       	breq	.+82     	; 0x27e <__vector_11+0x92>
 22c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <measure_ok>
 230:	81 11       	cpse	r24, r1
 232:	25 c0       	rjmp	.+74     	; 0x27e <__vector_11+0x92>
	{
		if ((PIND & (1 << PIND2)) != 0 && measure_count > 10)
 234:	4a 9b       	sbis	0x09, 2	; 9
 236:	10 c0       	rjmp	.+32     	; 0x258 <__vector_11+0x6c>
 238:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <measure_count>
 23c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <measure_count+0x1>
 240:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <measure_count+0x2>
 244:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <measure_count+0x3>
 248:	0b 97       	sbiw	r24, 0x0b	; 11
 24a:	a1 05       	cpc	r26, r1
 24c:	b1 05       	cpc	r27, r1
 24e:	20 f0       	brcs	.+8      	; 0x258 <__vector_11+0x6c>
		{
			measure_ok = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <measure_ok>
 256:	13 c0       	rjmp	.+38     	; 0x27e <__vector_11+0x92>
		}else{
			measure_count++;
 258:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <measure_count>
 25c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <measure_count+0x1>
 260:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <measure_count+0x2>
 264:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <measure_count+0x3>
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	a1 1d       	adc	r26, r1
 26c:	b1 1d       	adc	r27, r1
 26e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <measure_count>
 272:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <measure_count+0x1>
 276:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <measure_count+0x2>
 27a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <measure_count+0x3>
		}		
	}
	
	if (time_div && measure_ok)
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_div>
 282:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time_div+0x1>
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	51 f0       	breq	.+20     	; 0x29e <__vector_11+0xb2>
 28a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <measure_ok>
 28e:	22 23       	and	r18, r18
 290:	31 f0       	breq	.+12     	; 0x29e <__vector_11+0xb2>
	{
		time_div--;
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time_div+0x1>
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time_div>
 29c:	49 c0       	rjmp	.+146    	; 0x330 <__vector_11+0x144>
	}else if(measure_ok){
 29e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <measure_ok>
 2a2:	88 23       	and	r24, r24
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <__vector_11+0xbc>
 2a6:	44 c0       	rjmp	.+136    	; 0x330 <__vector_11+0x144>
		time_div= 18;
 2a8:	82 e1       	ldi	r24, 0x12	; 18
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time_div+0x1>
 2b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time_div>
		
		if (countdown_timer == 0){
 2b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <countdown_timer>
 2b8:	81 11       	cpse	r24, r1
 2ba:	20 c0       	rjmp	.+64     	; 0x2fc <__vector_11+0x110>
			countdown_timer = measure_count / 18;
 2bc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <measure_count>
 2c0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <measure_count+0x1>
 2c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <measure_count+0x2>
 2c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <measure_count+0x3>
 2cc:	29 e3       	ldi	r18, 0x39	; 57
 2ce:	3e e8       	ldi	r19, 0x8E	; 142
 2d0:	43 ee       	ldi	r20, 0xE3	; 227
 2d2:	58 e3       	ldi	r21, 0x38	; 56
 2d4:	0e 94 21 02 	call	0x442	; 0x442 <__umulsidi3>
 2d8:	00 e2       	ldi	r16, 0x20	; 32
 2da:	0e 94 4e 02 	call	0x49c	; 0x49c <__lshrdi3>
 2de:	82 2e       	mov	r8, r18
 2e0:	93 2e       	mov	r9, r19
 2e2:	a4 2e       	mov	r10, r20
 2e4:	b5 2e       	mov	r11, r21
 2e6:	b6 94       	lsr	r11
 2e8:	a7 94       	ror	r10
 2ea:	97 94       	ror	r9
 2ec:	87 94       	ror	r8
 2ee:	b6 94       	lsr	r11
 2f0:	a7 94       	ror	r10
 2f2:	97 94       	ror	r9
 2f4:	87 94       	ror	r8
 2f6:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <countdown_timer>
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <__vector_11+0x116>
		}else{
			countdown_timer--;
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <countdown_timer>
		}
	
		uint8_t A = countdown_timer/10;	
 302:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <countdown_timer>
 306:	cd ec       	ldi	r28, 0xCD	; 205
 308:	8c 9f       	mul	r24, r28
 30a:	c1 2d       	mov	r28, r1
 30c:	11 24       	eor	r1, r1
 30e:	c6 95       	lsr	r28
 310:	c6 95       	lsr	r28
 312:	c6 95       	lsr	r28
		load_font(countdown_timer - (A*10));
 314:	2c 2f       	mov	r18, r28
 316:	22 0f       	add	r18, r18
 318:	92 2f       	mov	r25, r18
 31a:	99 0f       	add	r25, r25
 31c:	99 0f       	add	r25, r25
 31e:	92 0f       	add	r25, r18
 320:	89 1b       	sub	r24, r25
 322:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
		load_font(A);
 326:	8c 2f       	mov	r24, r28
 328:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
		do_rclk();
 32c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <do_rclk>
	}	
}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	cf 91       	pop	r28
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	bf 90       	pop	r11
 356:	af 90       	pop	r10
 358:	9f 90       	pop	r9
 35a:	8f 90       	pop	r8
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__vector_1>:

ISR(INT0_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	8f 93       	push	r24
	if (!measure_ok && !start_measure)
 372:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <measure_ok>
 376:	81 11       	cpse	r24, r1
 378:	0f c0       	rjmp	.+30     	; 0x398 <__vector_1+0x32>
 37a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <start_measure>
 37e:	81 11       	cpse	r24, r1
 380:	0b c0       	rjmp	.+22     	; 0x398 <__vector_1+0x32>
	{
		measure_count = 0;
 382:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <measure_count>
 386:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <measure_count+0x1>
 38a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <measure_count+0x2>
 38e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <measure_count+0x3>
		start_measure = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <start_measure>
	}else{
	
	}
}
 398:	8f 91       	pop	r24
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 3a4:	99 e2       	ldi	r25, 0x29	; 41
 3a6:	88 e1       	ldi	r24, 0x18	; 24
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	a8 95       	wdr
 3ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>


int main(void)
{
	wdt_enable(WDTO_8S);
	PORTA = 0B00000100;
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	82 b9       	out	0x02, r24	; 2
	DDRA = 0b10011111;
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	81 b9       	out	0x01, r24	; 1
	EIMSK |= _BV(INT0);
 3c0:	8d b3       	in	r24, 0x1d	; 29
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	8d bb       	out	0x1d, r24	; 29
    EICRA |= _BV(ISC01);
 3c6:	e9 e6       	ldi	r30, 0x69	; 105
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	80 83       	st	Z, r24
	ASSR |= 1<<AS2;
 3d0:	e6 eb       	ldi	r30, 0xB6	; 182
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	80 83       	st	Z, r24
	//TCCR2B = 0b00000101; //start timer for seconds
	TCCR2B = 0b00000010; //start timer for seconds
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 1;
 3e0:	c1 e0       	ldi	r28, 0x01	; 1
 3e2:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	80 e7       	ldi	r24, 0x70	; 112
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x48>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x52>
 3f6:	00 00       	nop
	_delay_ms(100);
	
	RGB_Index = 0B00000111;
 3f8:	87 e0       	ldi	r24, 0x07	; 7
 3fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	load_font(11); //'-'
 3fe:	8b e0       	ldi	r24, 0x0B	; 11
 400:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
	load_font(11); //'-'
 404:	8b e0       	ldi	r24, 0x0B	; 11
 406:	0e 94 df 00 	call	0x1be	; 0x1be <load_font>
	do_rclk();
 40a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <do_rclk>
	DISPLAY_ON();
 40e:	82 b1       	in	r24, 0x02	; 2
 410:	8b 7f       	andi	r24, 0xFB	; 251
 412:	82 b9       	out	0x02, r24	; 2
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	89 e6       	ldi	r24, 0x69	; 105
 418:	98 e1       	ldi	r25, 0x18	; 24
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
	_delay_ms(1000);
	RGB_Index = 1;
 426:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 42a:	78 94       	sei
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	84 e3       	ldi	r24, 0x34	; 52
 430:	9c e0       	ldi	r25, 0x0C	; 12
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {	
		_delay_ms(500);
		wdt_reset();
 43e:	a8 95       	wdr
 440:	f5 cf       	rjmp	.-22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>

00000442 <__umulsidi3>:
 442:	e8 94       	clt

00000444 <__umulsidi3_helper>:
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	fc 01       	movw	r30, r24
 44a:	db 01       	movw	r26, r22
 44c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__umulhisi3>
 450:	7f 93       	push	r23
 452:	6f 93       	push	r22
 454:	e9 01       	movw	r28, r18
 456:	9a 01       	movw	r18, r20
 458:	ac 01       	movw	r20, r24
 45a:	bf 93       	push	r27
 45c:	af 93       	push	r26
 45e:	3f 93       	push	r19
 460:	2f 93       	push	r18
 462:	df 01       	movw	r26, r30
 464:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__umulhisi3>
 468:	26 f4       	brtc	.+8      	; 0x472 <__umulsidi3_helper+0x2e>
 46a:	6c 1b       	sub	r22, r28
 46c:	7d 0b       	sbc	r23, r29
 46e:	82 0b       	sbc	r24, r18
 470:	93 0b       	sbc	r25, r19
 472:	9e 01       	movw	r18, r28
 474:	eb 01       	movw	r28, r22
 476:	fc 01       	movw	r30, r24
 478:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__muldi3_6>
 47c:	af 91       	pop	r26
 47e:	bf 91       	pop	r27
 480:	2f 91       	pop	r18
 482:	3f 91       	pop	r19
 484:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__muldi3_6>
 488:	be 01       	movw	r22, r28
 48a:	cf 01       	movw	r24, r30
 48c:	f9 01       	movw	r30, r18
 48e:	2f 91       	pop	r18
 490:	3f 91       	pop	r19
 492:	cf 91       	pop	r28
 494:	df 91       	pop	r29
 496:	08 95       	ret

00000498 <__ashrdi3>:
 498:	97 fb       	bst	r25, 7
 49a:	10 f8       	bld	r1, 0

0000049c <__lshrdi3>:
 49c:	16 94       	lsr	r1
 49e:	00 08       	sbc	r0, r0
 4a0:	0f 93       	push	r16
 4a2:	08 30       	cpi	r16, 0x08	; 8
 4a4:	98 f0       	brcs	.+38     	; 0x4cc <__lshrdi3+0x30>
 4a6:	08 50       	subi	r16, 0x08	; 8
 4a8:	23 2f       	mov	r18, r19
 4aa:	34 2f       	mov	r19, r20
 4ac:	45 2f       	mov	r20, r21
 4ae:	56 2f       	mov	r21, r22
 4b0:	67 2f       	mov	r22, r23
 4b2:	78 2f       	mov	r23, r24
 4b4:	89 2f       	mov	r24, r25
 4b6:	90 2d       	mov	r25, r0
 4b8:	f4 cf       	rjmp	.-24     	; 0x4a2 <__lshrdi3+0x6>
 4ba:	05 94       	asr	r0
 4bc:	97 95       	ror	r25
 4be:	87 95       	ror	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	57 95       	ror	r21
 4c6:	47 95       	ror	r20
 4c8:	37 95       	ror	r19
 4ca:	27 95       	ror	r18
 4cc:	0a 95       	dec	r16
 4ce:	aa f7       	brpl	.-22     	; 0x4ba <__lshrdi3+0x1e>
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <__umulhisi3>:
 4d4:	a2 9f       	mul	r26, r18
 4d6:	b0 01       	movw	r22, r0
 4d8:	b3 9f       	mul	r27, r19
 4da:	c0 01       	movw	r24, r0
 4dc:	a3 9f       	mul	r26, r19
 4de:	70 0d       	add	r23, r0
 4e0:	81 1d       	adc	r24, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	91 1d       	adc	r25, r1
 4e6:	b2 9f       	mul	r27, r18
 4e8:	70 0d       	add	r23, r0
 4ea:	81 1d       	adc	r24, r1
 4ec:	11 24       	eor	r1, r1
 4ee:	91 1d       	adc	r25, r1
 4f0:	08 95       	ret

000004f2 <__muldi3_6>:
 4f2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__umulhisi3>
 4f6:	46 0f       	add	r20, r22
 4f8:	57 1f       	adc	r21, r23
 4fa:	c8 1f       	adc	r28, r24
 4fc:	d9 1f       	adc	r29, r25
 4fe:	08 f4       	brcc	.+2      	; 0x502 <__muldi3_6+0x10>
 500:	31 96       	adiw	r30, 0x01	; 1
 502:	08 95       	ret

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
